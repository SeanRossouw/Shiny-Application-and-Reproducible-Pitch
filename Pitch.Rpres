Data Products Pitch
========================================================
author: Sean Rossouw
date: 2018/09/10
autosize: true

Tech Stock comparisons with Volumetric Moving Averages
========================================================


- Moving averages smooth short term spikes in stock closing prices to better visualise trends
- Adjusting the average for the trade volume allows a better analysis of trend momentum and better fit to the price
- Plotting a short term and long term moving average can help determine breakouts 

How it works
==================================================
- Financial data for a selection of major tech companies is downloaded for the last year
- Data is processed, tagged and added to a data frame for plotting in as a lattice of candlestick graphs
- The user can select two n values,being the number of periods to average over for each VWMA

VWMA in practice
========================================================

```{r, echo=FALSE}

library(dplyr)
library(shiny)
library(tidyquant)
library(lubridate)
    start<-as.Date("2017-09-09")
    end<-as.Date("2018-09-09")
    start_zoom<- (end-weeks(20))
    
    AAPL <- tq_get("AAPL", get = "stock.prices", from = start, to = end)
    AAPL<-add_column(AAPL, symbol="AAPL")
    data<-bind_rows(AAPL)
    
    data %>%
      filter(date >= start - days(2 * 50)) %>%
      ggplot(aes(x = date, y = close, volume = volume, group = symbol)) +
      geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
      geom_ma(ma_fun = VWMA, n=20, wilder = TRUE, linetype = 5) +
      geom_ma(ma_fun = VWMA, n=100 , wilder = TRUE, color = "red") + 
      labs(title = "Example Tech Stock", subtitle= "N1= 20,       N2 = 100",
           y = "Closing Price", x = "") + 
      coord_x_date(xlim = c(start_zoom, end)) +
      facet_wrap(~ symbol, ncol = 2, scales = "free_y") + 
      theme_tq()
```

Extra details
======================
- The app makes use of reactive blocks in Shiney to improve computational efficiency
- Computations that are unchanged by user input, being the stock data and table creation are not repeated every time the user inputs a new n variable